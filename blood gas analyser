import json
import os
import random
import time

class BloodGasAnalyzer:
    def __init__(self, filename="blood_gas_readings.json"):
        self.filename = filename
        self.readings = []
        self.reference_ranges = {
            "pH": (7.35, 7.45),
            "pCO2": (35, 45),  # mmHg
            "pO2": (75, 100),   # mmHg
            "HCO3": (22, 26)    # mmol/L
        }
        self.load_readings()

    def load_readings(self):
        """Load previous blood gas readings from JSON file."""
        if os.path.exists(self.filename):
            try:
                with open(self.filename, 'r') as file:
                    self.readings = json.load(file)
                print("Blood gas readings loaded successfully.")
            except json.JSONDecodeError:
                print("Error loading readings. Starting with an empty database.")
                self.readings = []
        else:
            print("No readings file found. Starting with an empty database.")

    def save_readings(self):
        """Save blood gas readings to JSON file."""
        try:
            with open(self.filename, 'w') as file:
                json.dump(self.readings, file, indent=4)
            print("Readings saved successfully.")
        except Exception as e:
            print(f"Error saving readings: {e}")

    def simulate_blood_gas_reading(self):
        """Simulate blood gas readings."""
        return {
            "pH": round(random.uniform(7.2, 7.6), 2),        # Realistic pH range
            "pCO2": round(random.uniform(30, 50), 1),        # mmHg
            "pO2": round(random.uniform(60, 110), 1),        # mmHg
            "HCO3": round(random.uniform(18, 30), 1)         # mmol/L
        }

    def interpret_reading(self, reading):
        """Interpret blood gas reading for acid-base status."""
        pH = reading["pH"]
        pCO2 = reading["pCO2"]
        HCO3 = reading["HCO3"]

        # Basic acid-base interpretation
        if pH < self.reference_ranges["pH"][0]:  # Acidosis
            if pCO2 > self.reference_ranges["pCO2"][1]:
                return "Respiratory Acidosis"
            elif HCO3 < self.reference_ranges["HCO3"][0]:
                return "Metabolic Acidosis"
        elif pH > self.reference_ranges["pH"][1]:  # Alkalosis
            if pCO2 < self.reference_ranges["pCO2"][0]:
                return "Respiratory Alkalosis"
            elif HCO3 > self.reference_ranges["HCO3"][1]:
                return "Metabolic Alkalosis"
        return "Normal"

    def record_reading(self, patient_id, readings=None):
        """Record a new blood gas reading."""
        if readings is None:
            readings = self.simulate_blood_gas_reading()
        else:
            try:
                readings = {
                    "pH": float(readings.get("pH")),
                    "pCO2": float(readings.get("pCO2")),
                    "pO2": float(readings.get("pO2")),
                    "HCO3": float(readings.get("HCO3"))
                }
            except (ValueError, TypeError):
                print("Invalid input. Please enter numeric values for all parameters.")
                return

        status = self.interpret_reading(readings)
        reading = {
            "patient_id": patient_id,
            "pH": readings["pH"],
            "pCO2": readings["pCO2"],
            "pO2": readings["pO2"],
            "HCO3": readings["HCO3"],
            "status": status,
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S")
        }
        self.readings.append(reading)
        self.save_readings()

        print("\n--- Blood Gas Reading ---")
        print(f"Patient ID: {patient_id}")
        print(f"pH: {readings['pH']} (Range: {self.reference_ranges['pH'][0]}–{self.reference_ranges['pH'][1]})")
        print(f"pCO2: {readings['pCO2']} mmHg (Range: {self.reference_ranges['pCO2'][0]}–{self.reference_ranges['pCO2'][1]})")
        print(f"pO2: {readings['pO2']} mmHg (Range: {self.reference_ranges['pO2'][0]}–{self.reference_ranges['pO2'][1]})")
        print(f"HCO3: {readings['HCO3']} mmol/L (Range: {self.reference_ranges['HCO3'][0]}–{self.reference_ranges['HCO3'][1]})")
        print(f"Status: {status}")
        print(f"Time: {reading['timestamp']}")
        print("------------------------")

    def view_readings(self):
        """Display all blood gas readings."""
        if not self.readings:
            print("No blood gas readings available.")
            return
        print("\n--- Blood Gas Reading History ---")
        for reading in self.readings:
            print(f"Patient ID: {reading['patient_id']}, "
                  f"pH: {reading['pH']}, pCO2: {reading['pCO2']} mmHg, "
                  f"pO2: {reading['pO2']} mmHg, HCO3: {reading['HCO3']} mmol/L, "
                  f"Status: {reading['status']}, Time: {reading['timestamp']}")
        print("--------------------------------")

def main():
    analyzer = BloodGasAnalyzer()

    while True:
        print("\n=== Blood Gas Analyzer Simulator ===")
        print("1. Record New Blood Gas Reading")
        print("2. View All Readings")
        print("3. Exit")
        choice = input("Enter your choice (1-3): ")

        if choice == "1":
            patient_id = input("Enter Patient ID: ")
            manual_input = input("Enter readings manually? (y/n): ").lower()
            if manual_input == 'y':
                readings = {
                    "pH": input("Enter pH (e.g., 7.35): "),
                    "pCO2": input("Enter pCO2 (mmHg, e.g., 40): "),
                    "pO2": input("Enter pO2 (mmHg, e.g., 90): "),
                    "HCO3": input("Enter HCO3 (mmol/L, e.g., 24): ")
                }
                analyzer.record_reading(patient_id, readings)
            else:
                analyzer.record_reading(patient_id)

        elif choice == "2":
            analyzer.view_readings()

        elif choice == "3":
            print("Exiting blood gas analyzer. Goodbye!")
            break

        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()
